worker_processes  1;

# Let OpenResty see these environment variables inside Lua
env JWT_SECRET;
env FRONTEND_URL;
env BACKEND_URL;

error_log  /dev/stderr info;

events {
    worker_connections  1024;
}

http {
    lua_code_cache on;

    # Docker embedded DNS server address
    # resolver 127.0.0.11 ipv6=off;
    resolver local=on ipv6=off;

    server {
        listen 7860;
        server_name _;

        # Public static assets don't need auth
        location ^~ /assets/ {
            set_by_lua_block $frontend_url { return os.getenv("FRONTEND_URL") or "http://frontend:3000" }
            proxy_pass $frontend_url$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy to LangFlow backend (API)
        location /api/ {
            access_by_lua_file /usr/local/openresty/nginx/lua/jwt.lua;
            set_by_lua_block $backend_url { return os.getenv("BACKEND_URL") or "http://backend:7860" }
            proxy_pass $backend_url$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Everything else goes to the frontend (built static site)
        location / {
            access_by_lua_file /usr/local/openresty/nginx/lua/jwt.lua;
            set_by_lua_block $frontend_url { return os.getenv("FRONTEND_URL") or "http://frontend:3000" }
            proxy_pass $frontend_url$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
} 